{
    "pagekey": "5a5b9f29-d7b6-4a80-a4a2-94f3d80bf933",
    "question": "File Parameters \n with UploadFile¶ Define a file parameter with a type of UploadFile:\n\nPython 3.9+\nPython 3.8+\nPython 3.8+ non-Annotated\n\nfrom typing import Annotated\n\nfrom fastapi import FastAPI, File, UploadFile\n\napp = FastAPI()\n\n@app.post('/files/')\nasync def create_file(file: Annotated[bytes, File()]):\n\nUsing UploadFile has several advantages over bytes:\n\nYou don't have to use File() in the default value of the parameter.\nIt uses a file:\nA file stored in memory up to a maximum size limit, and after passing this limit it will be stored in disk.\nThis means that it will work well for large files like images, videos, large binaries, etc. without consuming all the memory.\nYou can get metadata from the uploaded file.\nIt has a file-like async interface.\nIt exposes an actual Python SpooledTemporaryFile object that you can pass directly to other libraries that expect a file-like object.\nUploadFile¶ UploadFile has the following attributes:\n\nfilename: A str with the original file name that was uploaded (e.g. myimage.jpg).\ncontent_type: A str with the content type (MIME type / media type) (e.g. image/jpeg).\nfile: A SpooledTemporaryFile (a file-like object). This is the actual Python file that you can pass directly to other functions or libraries that expect a 'file-like' object.\nUploadFile has the following async methods. They all call the corresponding file methods underneath (using the internal SpooledTemporaryFile).\n\nwrite(data): Writes data (str or bytes) to the file.\nread(size): Reads size (int) bytes/characters of the file.\nseek(offset): Goes to the byte position offset (int) in the file. E.g., await myfile.seek(0) would go to the start of the file. This is especially useful if you run await myfile.read() once and then need to read the contents again.\nclose(): Closes the file."
}
